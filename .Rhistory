lapply(complete$body, length(unlist))
lapply(complete$body, function(x) length(unlist(x)))
cnt <- sapply(dfs, nrow)
dfs[cnt == max(cnt)]
x <- sapply(complete, nrow)
x
apply(complete,2,nchar)[,2]
apply(complete,2,nchar)[,3]
apply(complete,2,nchar)[,4]
apply(complete,1,nchar)[,4]
apply(complete,2,nchar)[,4]
apply(complete,1,nchar)[,3]
apply(complete,2,nchar)[,3]
sort(apply(complete,2,nchar)[,3])
data.frame(names=complete$body,chr= apply(complete,2,nchar)[,3]
)
blah <- data.frame(names=complete$body,chr= apply(complete,2,nchar)[,3])
View(blah)
just_received <- complete %>% filter(status == "received")
data.frame(names= just_received$body,chr= apply(complete,2,nchar)[,3])
just_received <- complete %>% filter(status == "received")
data.frame(names= just_received$body,chr= apply(just_received,2,nchar)[,3])
blah <- data.frame(names= just_received$body,chr= apply(just_received,2,nchar)[,3])
View(blah)
blah <- data.frame(body= just_received$body,chr= apply(just_received,2,nchar)[,3])
just_received <- complete %>% filter(status == "received")
blah <- data.frame(from = from, body= just_received$body,chr= apply(just_received,2,nchar)[,3])
just_received <- complete %>% filter(status == "received")
blah <- data.frame(from = just_received$from, body= just_received$body,chr= apply(just_received,2,nchar)[,3])
just_received <- complete %>% filter(status == "received")
blah <- data.frame(from = just_received$from, date = just_received$sentdate, body= just_received$body,chr= apply(just_received,2,nchar)[,3])
message_length <- data.frame(from = just_received$from, date = just_received$sentdate, body= just_received$body,chr= apply(just_received,2,nchar)[,3])
View(message_length)
complete[1295,]
View(complete[1295,])
View(complete[1361,])
View(complete)
View(complete[from == 7132680933,])
View(complete[complete$from == 7132680933,])
complete[complete$from == 7132680933, "body"]
complete[complete$from == 2812546869, "body"]
complete[complete$from == 8326023761, "body"]
#'These are totes some go-to R packages
library(dplyr)
library(tidyr)
library(lubridate)
library(stringr)
library(ggplot2)
library(janitor)
library(knitr)
#'Read in csv. Notice how there are extra columns and the column names are not consistently formatted.
#'Let's clean up the column names using a nifty package called janitor
#'if we don't use janitor we could also rename them another way
df <- read.csv("/Users/Niha/Desktop/just_tacos_and_burritos.csv", stringsAsFactors = FALSE, na.strings=c("","NA")) %>% clean_names()
library(readr)
#'These are totes some go-to R packages
library(dplyr)
library(tidyr)
library(lubridate)
library(stringr)
library(ggplot2)
library(janitor)
library(knitr)
library(readr)
#'Read in csv. Notice how there are extra columns and the column names are not consistently formatted.
#'Let's clean up the column names using a nifty package called janitor
#'if we don't use janitor we could also rename them another way
df <- read.csv("/Users/Niha/Desktop/just_tacos_and_burritos.csv", stringsAsFactors = FALSE, na.strings=c("","NA")) %>% clean_names()
df <- read_csv("/Users/Niha/Desktop/just_tacos_and_burritos.csv")
View(df)
df <- read_csv("/Users/Niha/Desktop/just_tacos_and_burritos.csv") %>% clean_names()
View(df)
df <- df[,colSums(is.na(df)) < nrow(df)]
?n
df %>% group_by(name) %>% summarise(menu_items = n(menus_name))
df %>% group_by(name) %>% summarise(menu_items = length(menus_name))
df %>% group_by(name) %>% summarise(menu_items = length(menus_name)) %>% top_n(5)
df %>% group_by(name) %>% summarise(menu_items = length(menus_name)) %>% arrange(desc(menu_tems) %>% %>% top_n(5)
#'It would be cool if we could visualize all the restaurant locations in the U.S.
#'However notice there are a lot of missing lats/longitutdes... How should we clean address names?
#' Menu names have a lot of potential for cleaning. Notice the '()' in a lot of the menu items.
df %>% group_by(name) %>% summarise(menu_items = length(menus_name)) %>% arrange(desc(menu_tems) %>% top_n(5)
#'It would be cool if we could visualize all the restaurant locations in the U.S.
#'However notice there are a lot of missing lats/longitutdes... How should we clean address names?
#' Menu names have a lot of potential for cleaning. Notice the '()' in a lot of the menu items.
df %>% group_by(name) %>% summarise(menu_items = length(menus_name)) %>% arrange(desc(menu_tems)) %>% top_n(5)
df %>% group_by(name) %>% summarise(menu_items = length(menus_name))
df %>% group_by(name) %>% summarise(menu_items = length(menus_name)) %>% top_n(10)
df %>% group_by(name) %>% summarise(menu_items = length(menus_name)) %>% top_n(10) %>% arrange(desc(.))
df %>% group_by(name) %>% summarise(menu_items = length(menus_name)) %>% top_n(10)
View(df %>% group_by(name) %>% summarise(menu_items = length(menus_name)) %>% top_n(10))
View(df %>% group_by(name) %>% distinct(menus_name))
View(df %>% group_by(name)%>% distinct(menus_name) %>% summarise(menu_items = length(menus_name)) %>% top_n(10))
View(df %>% group_by(name)%>% distinct(menus_name) %>% summarise(menu_items = length(menus_name)))
head(df$menus_description)
install.packages("pacman")
install.packages(c('tm', 'SnowballC', 'wordcloud', 'topicmodels'))
DocumentTermMatrix(df$menus_description)
?DocumentTermMAtrix
?DocumentTermMatrix
??DocumentTermMatrix
tm::DocumentTermMatrix(df$menus_description)
tm::TermDocumentMatrix(df$menus_description)
library(tm)
dtm <- DocumentTermMatrix(df$menus_description)
dtm <- DocumentTermMatrix(df)
dtm <- DocumentTermMatrix(df$menus_description
)
tdm <- TermDocumentMatrix(Corpus(DataframeSource(df$menus_description)))
tdm <- TermDocumentMatrix(Corpus(DataframeSource(df)))
tdm <- TermDocumentMatrix(Corpus(DataframeSource(df[,"menus_description"])))
corpus <- Corpus(VectorSource(df$menus_description))
corpus
TermDocumentMatrix(corpus)
inspect(corpus)
TermDocumentMatrix(corpus)
TDM <- TermDocumentMatrix(corpus)
inspect(TDM[1:10,1:10])
inspect(TDM[1:5,1:5])
inspect(DTM[1:10,1:10])
inspect(TDM[1:10,1:10])
findFreqTerms(TDM, 2000)
corpus <- Corpus(VectorSource(df$menus_description))
corpus <- corpus %>% tm_map(.,tolower) %>% tm_map(., removePunctuation) %>%
tm_map(., removeNumbers) %>% tm_map(., removeWords,stopwords("english"))
TDM <- TermDocumentMatrix(corpus)
findFreqTerms(TDM, 2000)
findFreqTerms(TDM, 10000)
findFreqTerms(TDM, 50000)
findFreqTerms(TDM, 5000)
findAssocs(TDM, "mexican", 0.8)
findAssocs(TDM, "taco", 0.8)
findAssocs(TDM, "taco", 0.3)
findAssocs(TDM, "mexican", 0.3)
findAssocs()
findAssocs
f <- function(a) g(a)
g <- function(b) h(b)
h <- function(c) i(c)
i <- function(d) "a" + d
f(10)
traceback()
f <- function(a) g(a)
g <- function(b) h(b)
h <- function(c) i(c)
i <- function(d) "a" + d
f(10)
f <- function(a) g(a)
g <- function(b) h(b)
h <- function(c) i(c)
i <- function(d) "a" + d
f(10)
elements <- list(1:10, c(-1, 10), c(TRUE, FALSE), letters)
results <- lapply(elements, log)
results
elements <- list(1:10, c(-1, 10), c(TRUE, FALSE), letters)
results <- lapply(elements, try(log))
results <- lapply(elements, function(x) try(log(x)))
results
is.error <- function(x) inherits(x, "try-error")
succeeded <- !vapply(results, is.error, logical(1))
is.error
succeeded
str(results[succeeded])
str(results[!succeeded])
mother <- as.data.frame(list(month=12, day=1, year=1988))
mother
mother$birth1 <- as.POSIXct(paste0(as.character(mother$year),
"-", as.character(mother$month),
"-", as.character(mother$day)),
origin="1970-01-01")
mother
mother$birth1 <- as.numeric(as.POSIXct(paste0(as.character(mother$year),
"-", as.character(mother$month),
"-", as.character(mother$day)),
origin="1970-01-01"))
print(mother)
##   month day year    birth1
## 1    12   1 1988 596934000
WELCOME!
Here you will find daily news and tutorials about R, contributed by over 750 bloggers.
There are many ways to follow us -
By e-mail:
Your e-mail here
Subscribe
On Facebook:
If you are an R blogger yourself you are invited to add your own R content feed to this site (Non-English R bloggers should add themselves- here)
JOBS FOR R-USERS
Data Scientist @ Garching bei München, Bayern, Germany
Software Developer
Senior Quantitative Analyst, Data Scientist
R data wrangler
Senior Data Scientist
Search & Hit Enter
POPULAR SEARCHES
googlevis
heatmap
twitter
latex
sales forecasting
sql
web Scraping
eof
hadoop
Jeff Hemsley
random forest
3 d clusters
anova
blotter
boxplot
coplot
decision tree
discriminant
financial
ggplot background grid colour
how to import image file to r
maps
purrr
rattle
Trading
bar chart
barplot
Binary
climate
contingency table data frame
RECENT POSTS
R Interface to Spark
Data Science for Business – Time Series Forecasting Part 2: Forecasting with timekit
Run massive parallel R jobs cheaply with updated doAzureParallel package
Introduction to Set Theory and Sets with R
Campaign Response Testing no longer published on Udemy
Neural networks Exercises (Part-1)
Introducing the MonteCarlo Package
Words growing or shrinking in Hacker News titles: a tidy analysis
Test-driving Microsoft Cognitive Toolkit in R using reticulate
Deep Learning with R
Add P-values and Significance Levels to ggplots
UK R Courses
Unconf projects 4: cityquant, notary, packagemetrics, pegax
Tic Tac Toe Part 3: The Minimax Algorithm
What is the tidyverse?
OTHER SITES
Jobs for R-users
SAS blogs
Careful with tryCatch
June 20, 2016
By Bruno Rodrigues
(This article was first published on Econometrics and Free Software, and kindly contributed to R-bloggers)
tryCatch is one of the functions that allows the users to handle errors in a simple way. With it, you can do things like: if(error), then(do this).
Take the following example:
sqrt("a")
Error in sqrt("a") : non-numeric argument to mathematical function
Now maybe you’d want something to happen when such an error happens. You can achieve that with tryCatch:
tryCatch(sqrt("a"), error=function(e) print("You can't take the square root of a character, silly!"))
## [1] "You can't take the square root of a character, silly!"
Why am I interested in tryCatch?
I am currently working with dates, specifically birthdays of people in my data sets. For a given mother, the birthday of her child is given in three distinct columns: a column for the child’s birth year, birth month and birth day respectively. I’ve wanted to put everything in a single column and convert the birthday to unix time (I have a very good reason to do that, but I won’t bore you with the details).
Let’s create some data:
mother <- as.data.frame(list(month=12, day=1, year=1988))
In my data, there’s a lot more columns of course, such as the mother’s wage, education level, etc, but for illustration purposes, this is all that’s needed.
Now, to create this birthday column:
mother$birth1 <- as.POSIXct(paste0(as.character(mother$year),
"-", as.character(mother$month),
"-", as.character(mother$day)),
origin="1970-01-01")
and to convert it to unix time:
mother$birth1 <- as.numeric(as.POSIXct(paste0(as.character(mother$year),
"-", as.character(mother$month),
"-", as.character(mother$day)),
origin="1970-01-01"))
print(mother)
##   month day year    birth1
## 1    12   1 1988 596934000
Now let’s see what happens in this other example here:
mother2 <- as.data.frame(list(month=2, day=30, year=1988))
mother2$birth1 <- as.POSIXct(paste0(as.character(mother2$year),
"-", as.character(mother2$month),
"-", as.character(mother2$day)),
origin="1970-01-01")
mother
mother2 <- as.data.frame(list(month=2, day=30, year=1988))
mother2
mother2$birth1 <- tryCatch(as.POSIXct(paste0(as.character(mother2$year),
"-", as.character(mother2$month),
"-", as.character(mother2$day)),
origin="1970-01-01"), error=function(e) NA)
mother2
mother2$birth1 <- tryCatch(as.POSIXct(paste0(as.character(mother2$year),
"-", as.character(mother2$month),
"-", as.character(mother2$day)),
origin="1970-01-01"), error=NA)
mother2$birth1 <- tryCatch(as.POSIXct(paste0(as.character(mother2$year),
"-", as.character(mother2$month),
"-", as.character(mother2$day)),
origin="1970-01-01"), error=function(e) NA)
mother <- as.data.frame(list(month=c(12, 2), day=c(1, 30), year=c(1988, 1987)))
print(mother)
mother
mother$birth1 <- tryCatch(as.POSIXct(paste0(as.character(mother$year),
"-", as.character(mother$month),
"-", as.character(mother$day)),
origin="1970-01-01"), error=function(e) NA)
print(mother)
inputs = list(1, 2, 4, -5, 'oops', 0, 10)
for(input in inputs) {
+   print(paste("log of", input, "=", log(input)))
+ }
for(input in inputs) {
print(paste("log of", input, "=", log(input)))
}
for(input in inputs) {
print(paste("log of", input, "=", log(input)))
}
traceback()
for(input in inputs) {
tryCatch(print(paste("log of", input, "=", log(input))),)
> for(input in inputs) {
tryCatch(print(paste("log of", input, "=", log(input))),
warning = function(w) {print(paste("negative argument", input));
log(-input)},
error = function(e) {print(paste("non-numeric argument", input));
NaN})
}
> for(input in inputs) {
tryCatch(print(paste("log of", input, "=", log(input))),
warning = function(w) {print(paste("negative argument", input));
log(-input)},
error = function(e) {print(paste("non-numeric argument", input));
NaN})
library(ggplot2)
library(lubridate)
library(janitor)
library(dplyr)
library(knitr)
library(ggmap)
library(readr)
library(zipcode)
library(stringr)
#GOALS:usage patterns, unmet needs, areas of confusion
setwd("~/Harvey_Textbot_Data_Stuff")
harvey_texts <- read.csv("harvey_texts.csv", stringsAsFactors = FALSE)
#'Get only text bodies with zipcodes mentioned from Texas
harvey_texts<- harvey_texts %>% filter(Status == "received")
pattern <- "(\\b([7][0-9]{4})\\b)"
texas_zipcodes <- harvey_texts[grepl(pattern, harvey_texts$Body),]
texas_zipcodes$zip <- str_extract(texas_zipcodes$Body, pattern)
#'Get texts messages inquring about volunteers
texas_zipcodes$type <- NULL
texas_zipcodes[,"type"] <- ifelse(grepl("volunteer", texas_zipcodes$Body, ignore.case = TRUE),"volunteer","shelter")
table(texas_zipcodes$type)
#'Geocode zipcodes
data("zipcode")
texas_zipcodes <- texas_zipcodes %>% left_join(zipcode, by = "zip")
#'map the locations: country wide
#usa <- map_data("usa")
# ggplot() + geom_polygon(data = usa, aes(x=long, y = lat, group = group)) +
#   coord_fixed(1.3) +  geom_point(data = zipcodes, aes(x = longitude, y = latitude), color = "yellow", size = 1)
counties <- map_data("county")
tx_county <- subset(counties, region == "texas")
texas_df <- map_data("state") %>% subset(., region == "texas")
ggplot() + geom_polygon(data = texas_df, aes(x=long, y = lat, group = group)) +
coord_fixed(1.3) +  geom_point(data = subset(texas_zipcodes, zip %in% c(74000:78000)), aes(x = longitude, y = latitude), color = "yellow", size = 1)
texas_base <- ggplot(data = texas_df, mapping = aes(x = long, y = lat, group = group)) +
coord_fixed(1.3) +
geom_polygon(color = "black", fill = "gray")
library(gganimate)
texas_zipcodes$SentDate <- ymd_hms(texas_zipcodes$SentDate)%>% with_tz(., tzone = "CST6CDT")
texas_counties <- texas_base + theme_nothing() +
geom_polygon(data = tx_county, fill = NA, color = "white") +
geom_polygon(color = "black", fill = NA)+
geom_point(data = subset(texas_zipcodes, zip %in% c(74000:78000)), aes(x = longitude, y = latitude, group = NULL,frame = hour(SentDate))) +
geom_polygon(data = subset(tx_county, subregion == "harris"), fill = "NA", color = "blue", size = 1)
gganimate(texas_counties)
texas_zipcodes <- texas_zipcodes %>% arrange(desc(SentDate))
View(texas_zipcodes)
texas_zipcodes <- texas_zipcodes %>% arrange(SentDate)
texas_zipcodes <- texas_zipcodes %>% arrange(SentDate)
# first_time <- ymd_hms("2017-08-30 06:00:00") %>% force_tz(., tzone = "CST6CDT")
#
# texas_zipcodes$how_long <- as.numeric(minutes(as.period(interval(first_time, texas_zipcodes$SentDate))))
texas_counties <- texas_base + theme_nothing() +
geom_polygon(data = tx_county, fill = NA, color = "white") +
geom_polygon(color = "black", fill = NA)+
geom_point(data = subset(texas_zipcodes, zip %in% c(74000:78000)), aes(x = longitude, y = latitude, group = NULL,frame = hour(SentDate))) +
geom_polygon(data = subset(tx_county, subregion == "harris"), fill = "NA", color = "blue", size = 1)
# library(leaflet)
# #pal <- colorFactor(c("red", "green"), domain = c("shelter", "volunteer"))
#
# leaflet(data = texas_zipcodes) %>%
#   addTiles() %>%
#   setView(-95.4,29.8, zoom = 10) %>%
#   addCircleMarkers(
#     radius = ~ifelse(type == "volunteer",5,2),
#     color = ~ifelse(type == "volunteer", "green","red"),
#     stroke = FALSE)
#choropleth- text volume per zipcode over time
###
gganimate(texas_counties)
texas_zipcodes <- texas_zipcodes %>% arrange(SentDate )%>% sample_n(1e5)
texas_zipcodes <- texas_zipcodes %>% arrange(SentDate )%>% sample_n(10)
texas_counties <- texas_base + theme_nothing() +
geom_polygon(data = tx_county, fill = NA, color = "white") +
geom_polygon(color = "black", fill = NA)+
geom_point(data = subset(texas_zipcodes, zip %in% c(74000:78000)), aes(x = longitude, y = latitude, group = NULL,frame = hour(SentDate))) +
geom_polygon(data = subset(tx_county, subregion == "harris"), fill = "NA", color = "blue", size = 1)
gganimate(texas_counties)
texas_counties <- texas_base + theme_nothing() +
geom_polygon(data = tx_county, fill = NA, color = "white") +
geom_polygon(color = "black", fill = NA)+
geom_point(data = subset(texas_zipcodes, zip %in% c(74000:78000)), aes(x = longitude, y = latitude, group = NULL,frame = hour(SentDate))) +
geom_polygon(data = subset(tx_county, subregion == "harris"), fill = "NA", color = "blue", size = 1)
texas_counties
texas_counties <- texas_base + theme_nothing() +
geom_polygon(data = tx_county, fill = NA, color = "white") +
geom_polygon(color = "black", fill = NA)+
geom_point(data = subset(texas_zipcodes, zip %in% c(74000:78000)), aes(x = longitude, y = latitude, group = NULL,frame = hour(SentDate), color = "red")) +
geom_polygon(data = subset(tx_county, subregion == "harris"), fill = "NA", color = "blue", size = 1)
texas_counties
texas_counties <- texas_base + theme_nothing() +
geom_polygon(data = tx_county, fill = NA, color = "white") +
geom_polygon(color = "black", fill = NA)+
geom_point(data = subset(texas_zipcodes, zip %in% c(74000:78000)), aes(x = longitude, y = latitude, group = NULL,frame = hour(SentDate), color = "green")) +
geom_polygon(data = subset(tx_county, subregion == "harris"), fill = "NA", color = "blue", size = 1)
texas_counties
texas_counties <- texas_base + theme_nothing() +
geom_polygon(data = tx_county, fill = NA, color = "white") +
geom_polygon(color = "black", fill = NA)+
geom_point(data = subset(texas_zipcodes, zip %in% c(74000:78000)), aes(x = longitude, y = latitude, group = NULL,frame = hour(SentDate)), color = "red") +
geom_polygon(data = subset(tx_county, subregion == "harris"), fill = "NA", color = "blue", size = 1)
texas_counties
texas_counties <- texas_base + theme_nothing() +
geom_polygon(data = tx_county, fill = NA, color = "white") +
geom_polygon(color = "black", fill = NA)+
geom_point(data = subset(texas_zipcodes, zip %in% c(74000:78000)), aes(x = longitude, y = latitude, group = NULL,frame = hour(SentDate), cumulative = TRUE, color = "red")) +
geom_polygon(data = subset(tx_county, subregion == "harris"), fill = "NA", color = "blue", size = 1)
texas_counties
gganimate(texas_counties)
library(ggplot2)
library(lubridate)
library(janitor)
library(dplyr)
library(knitr)
library(ggmap)
library(readr)
library(zipcode)
library(stringr)
#GOALS:usage patterns, unmet needs, areas of confusion
setwd("~/Harvey_Textbot_Data_Stuff")
harvey_texts <- read.csv("harvey_texts.csv", stringsAsFactors = FALSE)
#'Get only text bodies with zipcodes mentioned from Texas
harvey_texts<- harvey_texts %>% filter(Status == "received")
pattern <- "(\\b([7][0-9]{4})\\b)"
texas_zipcodes <- harvey_texts[grepl(pattern, harvey_texts$Body),]
texas_zipcodes$zip <- str_extract(texas_zipcodes$Body, pattern)
#'Get texts messages inquring about volunteers
texas_zipcodes$type <- NULL
texas_zipcodes[,"type"] <- ifelse(grepl("volunteer", texas_zipcodes$Body, ignore.case = TRUE),"volunteer","shelter")
table(texas_zipcodes$type)
#'Geocode zipcodes
data("zipcode")
texas_zipcodes <- texas_zipcodes %>% left_join(zipcode, by = "zip")
#'map the locations: country wide
#usa <- map_data("usa")
# ggplot() + geom_polygon(data = usa, aes(x=long, y = lat, group = group)) +
#   coord_fixed(1.3) +  geom_point(data = zipcodes, aes(x = longitude, y = latitude), color = "yellow", size = 1)
counties <- map_data("county")
tx_county <- subset(counties, region == "texas")
texas_df <- map_data("state") %>% subset(., region == "texas")
ggplot() + geom_polygon(data = texas_df, aes(x=long, y = lat, group = group)) +
coord_fixed(1.3) +  geom_point(data = subset(texas_zipcodes, zip %in% c(74000:78000)), aes(x = longitude, y = latitude), color = "yellow", size = 1)
texas_base <- ggplot(data = texas_df, mapping = aes(x = long, y = lat, group = group)) +
coord_fixed(1.3) +
geom_polygon(color = "black", fill = "gray")
library(gganimate)
texas_zipcodes$SentDate <- ymd_hms(texas_zipcodes$SentDate)%>% with_tz(., tzone = "CST6CDT")
texas_zipcodes <- texas_zipcodes %>% arrange(SentDate)
texas_counties <- texas_base + theme_nothing() +
geom_polygon(data = tx_county, fill = NA, color = "white") +
geom_polygon(color = "black", fill = NA)+
geom_point(data = subset(texas_zipcodes, zip %in% c(74000:78000)), aes(x = longitude, y = latitude, group = NULL,frame = hour(SentDate), cumulative = TRUE, color = "red")) +
geom_polygon(data = subset(tx_county, subregion == "harris"), fill = "NA", color = "blue", size = 1)
ani.options(interval = 0.2)
gganimate(texas_counties)
ani.options(interval = 0.8)
gganimate(texas_counties)
texas_zipcodes <- texas_zipcodes %>% arrange(SentDate)
texas_counties <- texas_base + theme_nothing() +
geom_polygon(data = tx_county, fill = NA, color = "white") +
geom_polygon(color = "black", fill = NA)+
geom_point(data = subset(texas_zipcodes, zip %in% c(74000:78000)), aes(x = longitude, y = latitude, size =.3, group = NULL,frame = hour(SentDate), cumulative = TRUE), color = "red") +
geom_polygon(data = subset(tx_county, subregion == "harris"), fill = "NA", color = "blue", size = 1)
ani.options(interval = 0.8)
gganimate(texas_counties)
ani.options(interval = 0.8)
texas_zipcodes <- texas_zipcodes %>% arrange(SentDate)
texas_counties <- texas_base + theme_nothing() +
geom_polygon(data = tx_county, fill = NA, color = "white") +
geom_polygon(color = "black", fill = NA)+
geom_point(data = subset(texas_zipcodes, zip %in% c(74000:78000)), aes(x = longitude, y = latitude, size =.05, group = NULL,frame = hour(SentDate), cumulative = TRUE), color = "red") +
geom_polygon(data = subset(tx_county, subregion == "harris"), fill = "NA", color = "blue", size = 1)
gganimate(texas_counties, interval = .6)
texas_zipcodes <- texas_zipcodes %>% arrange(SentDate)
texas_counties <- texas_base + theme_nothing() +
geom_polygon(data = tx_county, fill = NA, color = "white") +
geom_polygon(color = "black", fill = NA)+
geom_point(data = subset(texas_zipcodes, zip %in% c(74000:78000)), aes(x = longitude, y = latitude, group = NULL,frame = hour(SentDate), cumulative = TRUE), color = "red") +
geom_polygon(data = subset(tx_county, subregion == "harris"), fill = "NA", color = "blue", size = 1)
gganimate(texas_counties, interval = .6)
gganimate(texas_counties, interval = .6, "output.gif")
gganimate(texas_counties, interval = .2, "output.gif")
gganimate(texas_counties, interval = 1, "output.gif")
gganimate(texas_counties, interval = 2, "output.gif")
